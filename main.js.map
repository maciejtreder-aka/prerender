{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object","./src/app/content.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA0C;;;;;IAQxC,yEACE;IAAA,wEAAoC;IAAA,uDAAqB;IAAA,4DAAK;IAC9D,yEACE;IAAA,oEACA;IAAA,oEAAG;IAAA,uDAA2B;IAAA,4DAAI;IACpC,4DAAM;IACN,yEACE;IAAA,uEAA8B;IAAA,uDAAmB;IAAA,4DAAI;IACvD,4DAAM;IACR,4DAAM;;;IARgC,0DAAqB;IAArB,qFAAqB;IAElD,0DAAsC;IAAtC,iLAAsC;IACxC,0DAA2B;IAA3B,2FAA2B;IAG3B,0DAA0B;IAA1B,4JAA0B;IAAC,0DAAmB;IAAnB,mFAAmB;;AAgChD,MAAM,YAAY;IAIvB,YAAoB,EAAkB;QAAlB,OAAE,GAAF,EAAE,CAAgB;IAAG,CAAC;IAE1C,QAAQ;QACN,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC;IAChD,CAAC;;wEARU,YAAY;4FAAZ,YAAY;QAvCvB,yGACE;;;QADgB,sJAAgD;;6FAuCvD,YAAY;cA1CxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE;;;;;;;;;;;CAWX;gBACC,MAAM,EAAE;oBACN;;;;;;;;;;;;;;;;;;;;;;;;KAwBC;iBACF;aACF;;;;;;;;;;;;;;AC9CD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACe;AAET;;AAaxC,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,EAAE,YAJJ;YACP,uEAAa;YACb,qEAAgB;SACjB;mIAIU,SAAS,mBATlB,2DAAY,aAGZ,uEAAa;QACb,qEAAgB;6FAKP,SAAS;cAXrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;iBACb;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,qEAAgB;iBACjB;gBACD,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;AChBD;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAA2C;;;AAOpC,MAAM,cAAc;IAEzB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAElC,eAAe;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAgB,qCAAqC,CAAC,CAAC;IAC/E,CAAC;;4EANU,cAAc;iGAAd,cAAc,WAAd,cAAc,mBAFb,MAAM;6FAEP,cAAc;cAH1B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ContentService } from './content.service';\nimport { Realization } from '../model/realization.model';\n\n@Component({\n  selector: 'app-root',\n  template: `\n  <div class=\"card\" *ngFor=\"let realization of realizations | async\">\n    <h2 class=\"card-header text-center\">{{realization.title}}</h2>\n    <div class=\"card-body\">\n      <img src=\"assets/img/{{realization.image}}\" />\n      <p>{{realization.descirption}}</p>\n    </div>\n    <div class=\"card-footer text-muted text-center\">\n      <a href=\"{{realization.url}}\">{{realization.url}}</a>\n    </div>\n  </div>\n`,\n  styles: [\n    `\n      :host {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        flex: 1;\n        padding: 100px;\n        justify-content: center;\n      }\n\n      .card {\n        margin: 10px;\n        width: 100%;\n      }\n\n      .card-body {\n        display: flex;\n        align-items: center;\n      }\n\n      img {\n        float: left;\n        margin-right: 10px;\n      }\n    `,\n  ],\n})\nexport class AppComponent {\n  \n  public realizations: Observable<Realization[]>;\n\n  constructor(private cs: ContentService) {}\n\n  ngOnInit(): void {\n    this.realizations = this.cs.getRealizations();\n  }\n}","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Realization } from '../model/realization.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContentService {\n\n  constructor(private http: HttpClient) { }\n\n  public getRealizations(): Observable<Realization[]> {\n      return this.http.get<Realization[]>('/prerender/assets/realizations.json');\n  }\n}"],"sourceRoot":"webpack:///"}